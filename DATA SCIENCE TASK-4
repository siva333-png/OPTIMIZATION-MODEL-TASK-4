# Import necessary libraries
import pulp
import matplotlib.pyplot as plt
import numpy as np

# 1. Define the Linear Programming Problem
# Create a problem variable, maximizing the objective function
problem = pulp.LpProblem("Production_Optimization", pulp.LpMaximize)

# 2. Define decision variables (x_A and x_B)
x_A = pulp.LpVariable("x_A", lowBound=0, cat='Continuous')  # Product A (non-negative)
x_B = pulp.LpVariable("x_B", lowBound=0, cat='Continuous')  # Product B (non-negative)

# 3. Define the Objective Function
problem += 50 * x_A + 40 * x_B  # Maximize profit

# 4. Define Constraints
problem += x_A + 2 * x_B <= 100  # Machine 1 time constraint
problem += 2 * x_A + x_B <= 150  # Machine 2 time constraint

# 5. Solve the problem
problem.solve()

# 6. Extracting and printing results
result_A = pulp.value(x_A)
result_B = pulp.value(x_B)
result_profit = pulp.value(problem.objective)

print("Optimal number of Product A to produce:", result_A)
print("Optimal number of Product B to produce:", result_B)
print("Maximum profit: $", result_profit)

# 7. Visualization (Graph)
# Plot the feasible region and the optimal solution

# Create data for plotting constraints
x = np.linspace(0, 100, 400)
y1 = (100 - x) / 2  # from x_A + 2x_B <= 100
y2 = 150 - 2 * x    # from 2x_A + x_B <= 150

# Plot the constraints
plt.figure(figsize=(8,6))
plt.plot(x, y1, label=r'$x_A + 2x_B \leq 100$', color='blue')
plt.plot(x, y2, label=r'$2x_A + x_B \leq 150$', color='red')

# Fill feasible region
plt.fill_between(x, np.minimum(y1, y2), 0, where=(x >= 0) & (np.minimum(y1, y2) >= 0), color='gray', alpha=0.5)

# Plot optimal solution
plt.plot(result_A, result_B, 'go', label="Optimal Solution")
plt.text(result_A + 2, result_B, f"({result_A:.2f}, {result_B:.2f})", fontsize=12)

# Labels and title
plt.xlim(0, 60)
plt.ylim(0, 60)
plt.xlabel(r'$x_A$ (Product A)')
plt.ylabel(r'$x_B$ (Product B)')
plt.title('Optimization Problem: Product A vs Product B')
plt.legend()
plt.grid(True)
plt.tight_layout()

# Show plot
plt.show()
